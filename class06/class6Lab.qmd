---
title: "Class 6: R Functions"
author: "Katelyn Wei (PID: A16682595)"
format: pdf
---

# Starting Vectors

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

# Q1. Writing a Function grade()

The mean() function gives the average:
```{r}
mean(student1)
```

We'd like to drop the lowest score. `min()` gives the lowest score, and `which.min()` tells you which position the score is in:
```{r}
min(student1)
which.min(student1)
```

Putting a minus sign in front of a position number removes it from the lineup:
```{r}
student1[-which.min(student1)]
```

We can then calculate student 1's average, dropping the lowest score!
```{r}
mean(student1[-which.min(student1)])
```

Student 2 has an NA. Plugging it into the code we used for student 2 doesn't give what we want because of it:
```{r}
mean(student2[-which.min(student2)])
```

The problem is in the mean, not which.min:
```{r}
which.min(student2)
mean(student2)
```

`na.rm` drops NA values if set to TRUE. Let's try it:
```{r}
mean(student2, na.rm = TRUE)
```

Inputting student 3 with the code for student 2 gives a really high mean because `na.rm` stripped all the NA's. But just using the default mean() also gives an NA(which we don't want!):
```{r}
mean(student3, na.rm = TRUE)
mean(student3)
```

typing out `student1`, `student2` is getting tiring so let's just set everything to x. It'll also let us override things without affecting the original dataset. 
```{r}
x <- student2
x
```

We want to make NA = 0. A quick google search gives you the `is.na()` function to do so(you can also use ChatGPT and Claude):
```{r}
x
is.na(x)
```

Logicals index vectors. We can use that to access the NAs in x and assign it to 0:
```{r}
x[is.na(x)] <- 0
x
```

Combining it with earlier code gives a string of functions for what we wanted it to do!
```{r}
# Set NA values to zero
x[is.na(x)] <- 0
# Drop lowest score to calculate mean
mean(x[-which.min(x)])
```

Testing it on student 1 and student 3 also works:
```{r}
x <- student1
x[is.na(x)] <- 0
mean(x[-which.min(x)])

x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```

Now to turn it into the `grade()` function:
```{r}
grade <- function(x) {
  # Set NA values to zero
  x[is.na(x)] <- 0
  # Drop lowest score to calculate mean
  mean(x[-which.min(x)])
}
```

Use this function(don't forget to run the code that makes grade a function!):
```{r}
grade(student1)
```

Now we need to read the gradebook:
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput",row.names = 1)
gradebook
```

`apply(X, MARGIN, FUN)` allows you to apply a function across a dataset, or array. **X** is the dataset, **margin** is how the matrix will be read (by row = 1, by column = 2, row and column =c(1,2)), and **fun** is the function you want to apply.
```{r}
ans <- apply(gradebook, 1, grade)
ans
```

# Q2. Who's the Top Scoring Student?

Based on the `ans` output student 18 is the highest scoring student. You can also use the `which.max` function to spit it out for you:
```{r}
which.max(ans)
```

# Q3. Which Homework was the Toughest?

We can calculate this by using the mean and apply functions. Since NA's set to 0 would seriously skew the mean, I've opted to set `na.rm = TRUE` to strip them from the calculation. 

```{r}
apply(gradebook, 2, mean, na.rm = TRUE)
```

Using the `which.min` function will then pinpoint the toughest homework:
```{r}
which.min(apply(gradebook, 2, mean, na.rm = TRUE))
```

# Q4. Which Homework was Predictive of Overall Score?

Gradebook still has NAs so let's make another vector that has them set to zero:
```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask
```

Now we can use the `apply()` and `cor()` functions on mask to find the correlation between homework and overall score(stored in the vector `ans`):
```{r}
apply(mask, 2, cor, y=ans)
```

All the correlation coefficients are positive. Since homework 5 has the largest value, it is the most predictive of overall score:
```{r}
which.max(apply(mask, 2, cor, y=ans))
```

